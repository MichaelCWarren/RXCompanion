// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// pxx //
// --- //

#define pxx_wrap_target 0
#define pxx_wrap 18

#define pxx_offset_entry_point 0u

static const uint16_t pxx_program_instructions[] = {
            //     .wrap_target
    0x7840, //  0: out    y, 32           side 1     
    0xe700, //  1: set    pins, 0                [7] 
    0xe701, //  2: set    pins, 1                [7] 
    0xe700, //  3: set    pins, 0                [7] 
    0xe701, //  4: set    pins, 1                [7] 
    0xe700, //  5: set    pins, 0                [7] 
    0xe701, //  6: set    pins, 1                [7] 
    0xe700, //  7: set    pins, 0                [7] 
    0xe701, //  8: set    pins, 1                [7] 
    0x7621, //  9: out    x, 1            side 0 [6] 
    0x002c, // 10: jmp    !x, 12                     
    0xa742, // 11: nop                           [7] 
    0xe601, // 12: set    pins, 1                [6] 
    0x0089, // 13: jmp    y--, 9                     
    0x18f0, // 14: jmp    !osre, 16       side 1     
    0x0000, // 15: jmp    0                          
    0xc000, // 16: irq    nowait 0                   
    0x6060, // 17: out    null, 32                   
    0x00f0, // 18: jmp    !osre, 16                  
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pxx_program = {
    .instructions = pxx_program_instructions,
    .length = 19,
    .origin = -1,
};

static inline pio_sm_config pxx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pxx_wrap_target, offset + pxx_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/clocks.h"
static inline void pxx_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = pxx_program_get_default_config(offset);
    // OUT shifts to right, autopull, 32 bits at a time
    sm_config_set_out_shift(&c, true, true, 32);
    // We are mapping both OUT and side-set to the same pin
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);
    // We only need TX, so get an 8-deep FIFO!
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // SM transmits 1 bit per 8 execution cycles. 8us pulses.
    float div =  (float)clock_get_hz(clk_sys) / (8 * 125000);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset + pxx_offset_entry_point, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

