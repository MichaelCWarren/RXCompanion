.program inverted_uart_rx

; Slightly more fleshed-out 8n1 UART receiver which handles framing errors and
; break conditions more gracefully.
; IN pin 0 and JMP pin are both mapped to the GPIO used as UART RX.

start:
    wait 1 pin 0            ; Stall until start bit is asserted
    set x, 7        [10]    ; Preload bit counter, then delay until halfway through
bitloop:                    ; the first data bit (12 cycles incl wait, set).
    in y, 1                
    mov ISR, ~y             ; Shift inverged data bit into ISR
    jmp x-- bitloop [5]     ; Loop 8 times, each loop iteration is 8 cycles
    jmp pin bad_stop        ; Check stop bit (should be low)
    push                    ; important in case the TX clock is slightly too fast.
    jmp start

bad_stop:                   ; No delay before returning to start; a little slack is
    irq 4 rel               ; Either a framing error or a break. Set a sticky flag,
    wait 0 pin 0            ; and wait for line to return to idle state.
    jmp start               ; Don't push data if we didn't see good framing.


% c-sdk {
#include "hardware/clocks.h"

static inline void inverted_uart_rx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    gpio_pull_up(pin);

    pio_sm_config c = inverted_uart_rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Shift to right, autopush disabled
    sm_config_set_in_shift(&c, true, false, 8);
    // Deeper FIFO as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);
    
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}