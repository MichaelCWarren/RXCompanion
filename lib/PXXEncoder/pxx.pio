.program pxx
.side_set 1 opt

public entry_point:
    irq     0                       side 1        ;tell the app we started/finished
    out     y, 32                                 ;get the number of bits to output or stall until more data is available,
preamble:                          
    set  pins, 0             [7]                  ;0
    set  pins, 1             [7]
    set  pins, 0             [7]                  ;0
    set  pins, 1             [7]
    set  pins, 0             [7]                  ;0
    set  pins, 1             [7]
    set  pins, 0             [7]                  ;0
    set  pins, 1             [7]
bitloop:
    out     x, 1             [6]    side 0        ;get the next bit
    jmp    !x, output_zero
output_one:
    nop                      [7]                  ;already low, just wait 8 more
output_zero:
    jmp   y--, bitloop       [7]    side 1
    jmp !OSRE, clear_bits
    jmp        entry_point
clear_bits:
    out  null, 32
    jmp !OSRE, clear_bits

% c-sdk {
#include "hardware/clocks.h"

static inline void pxx_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = pxx_program_get_default_config(offset);

    // OUT shifts to right, autopull, 32 bits at a time
    sm_config_set_out_shift(&c, true, true, 32);

    // We are mapping both OUT and side-set to the same pin
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);
    
    // We only need TX, so get an 8-deep FIFO!
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // SM transmits 1 bit per 8 execution cycles. 8us pulses.
    float div =  (float)clock_get_hz(clk_sys) / (8 * 125000);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset + pxx_offset_entry_point, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}